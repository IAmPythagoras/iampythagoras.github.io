.. Ayo anyone wants to parse?

User interface
==============

The **ffxivcalc** library contains a text-based user interface that allows one to simulate a fight without touching one line of code.
This is be the best alternative for those that do not want to go deep into coding and prefer instead to simply modify a text file.

As of now, the user interface is text-based, but there is plan in the future to make a graphical user interface. 

.. warning::

    Some of the command line used here might only work on Windows.

Launching the UI
^^^^^^^^^^^^^^^^

First of all, in order to work properly the UI requires a folder named *saved* in the same folder in which the UI is being used. 
So simply head to a folder that works for you and create in this folder a new folder called *saved*.

.. image:: mkdir_saved_picture.png
  :width: 800
  :alt: kirbo

Now, simply run the following command line in the same folder you just created the *saved* folder.

.. code-block:: text

    python -m ffxivcalc -TUI 0

.. warning::

    It is important to have the 0 as the end. It will otherwise not work

You should now see this :

.. image:: TUI_main_menu.png
  :width: 800
  :alt: kirbo

Create a file to simulate a fight
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Select the option to *Create JSON template file*. It will ask you for a name and then all the different players you want in your simulation.

Once you are done, if the *saved* folder was done properly it should have created the file. Now head to the *saved* folder and open the newly created JSON file.

You should see something like so :

.. code-block:: javascript

  {
      "data": {
          "fightInfo": {
              "fightDuration": 500,
              "time_unit": 0.01,
              "ShowGraph": true,
              "RequirementOn": true,
              "IgnoreMana": false
          },
          "PlayerList": [
              {
                  "JobName": "BlackMage",
                  "playerID": 1,
                  "stat": {
                      "MainStat": 390,
                      "WD": 0,
                      "Det": 390,
                      "Ten": 400,
                      "SS": 400,
                      "Crit": 400,
                      "DH": 400
                  },
                  "etro_gearset_url": "Put a URL here if you want. The code will only overwirte the stats if it detects an etro url.",
                  "Auras": [],
                  "actionList": [
                      {
                          "actionName": "putNameHere"
                      }
                  ]
              }
          ]
      }
  }

The *FightInfo* part is values like the maximum fight duration, time unit, etc. You can change those values as you wish.

.. warning::

  If the value you change must be of the same type as the default value. Otherwise the program will crash as it does not check to make sure every value is entered correctly.

Under it you can see the *PlayerList* which is, as its name implies, a list of all players and their parameters for the simulation. Some of these values you do not change, such as *Jobname* and
*playerID*.

You can change the *stat* as you wish or simply provide a etro gear set via its url in the appropriate field.

.. note::

  If an etro gear set is given, the program overwrites whatever is written in *stat*.

You can ignore the *Auras* field.

Your main focus should be on *actionList*. This is a list with all actions we want the player to perform in the order given. As you can see, the simulator accepts the action's name
rather than an ID which would be hard to remember. 

The general convention as to what the actions are named in the code goes as follow:

* First letter of every new word in the action names is uppercase
* Only if the player (at level 90) uses more than one action with the same name, but that differs in numbers will the numbers be in the action's name.
* The names have no space.

What I mean for the second point is that actions such as *Fire I*, *Fire II*, *Fire III* and *Fire IV* will have the number in the name since we have to differentiate. However, actions such as 
*Broil*, *Broil II*, *Broil III* and *Broil IV* will only be named *Broil* since the player can only use *Broil IV* at level 90.

If you want to make sure you are writting the names of the actions in such a way that the code can understand it, go check in `this <https://github.com/IAmPythagoras/FFXIV-Combat-Simulator/blob/main/ffxivcalc/Jobs/ActionEnum.py>`_ python file that implements all the different names of the actions.

WaitAbility
"""""""""""

If you want your player to wait for a specified amount of time, you simply need to use the *actionName* WaitAbility and add a field called *waitTime* and specify the number of seconds
you want the player to wait for.

.. code-block:: javascript
  
  {
    "actionName" : "WaitAbility",
    "waitTime" : 5.87
  }

  // Making player wait for 5.87 seconds


Now, here is how you could modify the above generated layout into something that would actually simulate:

.. code-block:: javascript

  {
      "data": {
          "fightInfo": {
              "fightDuration": 500,
              "time_unit": 0.01,
              "ShowGraph": true,
              "RequirementOn": true,
              "IgnoreMana": false
          },
          "PlayerList": [
              {
                  "JobName": "BlackMage",
                  "playerID": 1,
                  "stat": {
                      "MainStat": 390,
                      "WD": 0,
                      "Det": 390,
                      "Ten": 400,
                      "SS": 400,
                      "Crit": 400,
                      "DH": 400
                  },
                  "etro_gearset_url": "https://etro.gg/gearset/3cf2e303-4197-4afa-91a5-7c2d74d742c9",
                  "Auras": [],
                  "actionList": [
                      {
                          "actionName": "Sharpcast"
                      },
                      {
                          "actionName": "WaitAbility",
                          "waitTime" : 20
                      },
                      {
                          "actionName": "FireIII"
                      },
                      {
                          "actionName": "ThunderIII"
                      },
                      {
                          "actionName": "FireIV"
                      },
                      {
                          "actionName": "Triplecast"
                      },
                      {
                          "actionName": "FireIV"
                      },
                      {
                          "actionName": "Potion"
                      },
                      {
                          "actionName": "FireIV"
                      },
                      {
                          "actionName": "Amplifier"
                      },
                      {
                          "actionName": "Leylines"
                      },
                      {
                          "actionName": "FireIV"
                      },
                      {
                          "actionName": "Swiftcast"
                      },
                      {
                          "actionName": "Sharpcast"
                      },
                      {
                          "actionName": "Despair"
                      },
                      {
                          "actionName": "Manafont"
                      },
                      {
                          "actionName": "Triplecast"
                      },
                      {
                          "actionName": "FireIV"
                      },
                      {
                          "actionName": "Despair"
                      }
                  ]
              }
          ]
      }
  }


Now head back to the user interface and select the 1st option. You should see your fight saved there with the name you saved it as. Simply select it and it will run the simulation.

.. warning::

  make sure you do not leave any unwanted comma in the JSON file, as if it is not formatted correctly the program will crash.

.. warning::

  As of now, if an action's name is not the right name the program will not crash, but will not do anything. Meaning that it is hard to know if you did write them all correctly.

That's mostly it for how to use the user interface. If you aren't feeling confident in your coding abilities, but want to simulate anyway feel free to come to the `discord <https://discord.gg/EGuc59aP>`_
and ask questions.
